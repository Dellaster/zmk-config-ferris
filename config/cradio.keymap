/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <175>;
    quick_tap_ms = <150>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lh: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9>;
        };

        rh: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4>;
        };

        star_hash: star_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "STAR_HASH";
            bindings = <&kp ASTERISK>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_exc: dot_exc {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_EXC";
            bindings = <&kp PERIOD>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_ques: comma_ques {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUES";
            bindings = <&kp COMMA>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dash_at: dash_at {
            compatible = "zmk,behavior-mod-morph";
            label = "DASH_AT";
            bindings = <&kp MINUS>, <&kp AT_SIGN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        apos_star: apos_star {
            compatible = "zmk,behavior-mod-morph";
            label = "APOS_STAR";
            bindings = <&kp SQT>, <&kp ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        quo_hash: quo_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "QUO_HASH";
            bindings = <&kp DOUBLE_QUOTES>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fun_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 0>;
        };

        combo_bootleft {
            bindings = <&bootloader>;
            key-positions = <3 4>;
        };

        combo_bootright {
            bindings = <&bootloader>;
            key-positions = <6 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp J  &kp F  &kp M  &kp P         &kp V              &kp Z        &kp U            &kp O     &kp Y  &kp K
&kp R  &kp S  &kp N  &kp D         &kp W              &comma_ques  &kp A            &kp E     &kp I  &kp H
&kp X  &kp G  &kp L  &kp C         &kp B              &quo_hash    &dot_exc         &dash_at  &kp Q  &apos_star
                     &mt LSHIFT T  &lt 1 BACKSPACE    &lt 2 ENTER  &mt RSHFT SPACE
            >;
        };

        nav_layer {
            bindings = <
&none  &none           &none           &none         &none              &kp PSCRN  &none           &kp PG_UP           &kp INS       &none
&none  &lh LCTRL SLCK  &lh LALT PG_DN  &lh LSHIFT A  &kp END            &kp HOME   &lh RSHFT LEFT  &lh RIGHT_ALT DOWN  &lh RCTRL UP  &kp RIGHT_ARROW
&none  &kp DEL         &kp CLCK        &none         &kp PAUSE_BREAK    &none      &kp LNLCK       &kp K_CMENU         &none         &none
                                       &trans        &trans             &trans     &trans
            >;
        };

        sym_layer {
            bindings = <
&kp LBRC   &kp RBRC         &kp LPAR            &kp RPAR         &none            &none          &kp N7         &kp N8            &kp N9        &kp RA(W)
&kp GRAVE  &lh LCTRL MINUS  &lh LEFT_ALT EQUAL  &lh LSHIFT APOS  &kp FSLH         &kp BACKSLASH  &rh RSHIFT N4  &rh RIGHT_ALT N5  &rh RCTRL N6  &kp RA(L)
&kp LT     &kp GT           &kp LBKT            &kp RBKT         &kp SEMICOLON    &kp N0         &kp N1         &kp N2            &kp N3        &kp RA(Z)
                                                &trans           &trans           &trans         &trans
            >;
        };

        fun_layer {
            bindings = <
&kp K_PLAY_PAUSE  &kp K_MUTE        &kp C_VOLUME_UP          &kp C_BRIGHTNESS_INC  &bt BT_SEL 2    &bt BT_SEL 4    &kp F7  &kp F8  &kp F9  &kp F12
&lh LCTRL K_PREV  &lh LSHFT K_NEXT  &lh LMETA K_VOLUME_DOWN  &kp C_BRIGHTNESS_DEC  &bt BT_SEL 1    &bt BT_SEL 3    &kp F4  &kp F5  &kp F6  &kp F11
&bt BT_PRV        &bt BT_CLR        &out OUT_TOG             &bt BT_NXT            &bt BT_SEL 0    &bt BT_CLR_ALL  &kp F1  &kp F2  &kp F3  &kp F10
                                                             &trans                &trans          &trans          &trans
            >;
        };
    };
};
