/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

&sl {
    // release-after-ms = <2000>;
};

&sk {
    // release-after-ms = <2000>;
    // quick-release;
    // /delete-property/ ignore-modifiers;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_boot {
            bindings = <&bootloader>;
            key-positions = <5 6 7>;
        };

        combo_reset {
            bindings = <&sys_reset>;
            key-positions = <7 8 9>;
        };

        //        combo_tab {
        //            timeout-ms = <50>;
        //            key-positions = <10 11>;
        //            bindings = <&kp TAB>;
        //        };
        //        combo_ralt {
        //            timeout-ms = <50>;
        //            key-positions = <17 16>;
        //            bindings = <&kp RALT>;
        //        };
        //        combo_lalt {
        //            timeout-ms = <50>;
        //            key-positions = <11 12>;
        //            bindings = <&kp LALT>;
        //        };
        //        combo_lgui {
        //            timeout-ms = <50>;
        //            key-positions = <12 13>;
        //            bindings = <&kp LGUI>;
        //        };
        //
        //        combo_rgui {
        //            timeout-ms = <50>;
        //            key-positions = <17 18>;
        //            bindings = <&kp RGUI>;
        //       };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp W  &kp G  &kp D  &kp L            &kp V    &kp J      &kp Y      &kp O      &kp U       &kp SQT
&kp R  &kp S  &kp T  &kp H            &kp K    &kp P      &kp N      &kp E      &kp I       &kp A
&kp X  &kp C  &kp B  &kp M            &kp Q    &kp Z      &kp F      &kp COMMA  &kp PERIOD  &kp MINUS
                     &lt 1 BACKSPACE  &sl 4    &kp SPACE  &lt 2 RET
            >;
        };

        left_layer {
            bindings = <
&none  &none      &none      &none     &none         &kp ASTERISK  &mt F1 NUMBER_1  &mt F2 NUMBER_2  &mt F3 NUMBER_3  &kp F10
&none  &sk LMETA  &sk LCTRL  &sk LALT  &kp TAB       &kp PLUS      &mt F4 NUMBER_4  &mt F5 N5        &mt F6 NUMBER_6  &kp F11
&none  &none      &none      &none     &none         &kp SLASH     &mt F7 N7        &mt F8 N8        &mt F9 N9        &kp F12
                             &mo 1     &sk LSHIFT    &trans        &kp N0
            >;
        };

        right_layer {
            bindings = <
&none     &kp AT_SIGN    &kp HASH       &kp DLLR               &kp PERCENT       &none    &none     &none      &none      &none
&kp HASH  &kp QMARK      &kp FSLH       &kp EXCL               &kp QUESTION      &kp TAB  &sk RALT  &sk RCTRL  &sk RMETA  &none
&kp CAPS  &kp SEMICOLON  &mt RPAR LPAR  &mt RBKT LEFT_BRACKET  &mt BSLH SLASH    &none    &none     &none      &none      &none
                                        &mo 1                  &sk LSHIFT        &trans   &mo 2
            >;
        };

        tri_layer {
            bindings = <
&none       &none       &none       &none         &none           &kp HOME     &trans                &trans        &trans  &none
&none       &none       &none       &none         &none           &kp PAGE_UP  &kp C_BRI_UP          &kp K_VOL_UP  &none   &trans
&bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &bt BT_SEL 0  &bt BT_SEL 1    &kp PG_DN    &kp C_BRIGHTNESS_DEC  &kp K_VOL_DN  &trans  &none
                                    &trans        &sk LSHIFT      &trans       &trans
            >;
        };

        UPPER {
            bindings = <
&kp LS(W)  &kp LS(G)  &kp LS(D)  &kp LS(L)  &kp LS(V)    &kp LS(J)  &kp LS(Y)  &kp LS(O)     &kp LS(U)  &kp DOUBLE_QUOTES
&kp LS(R)  &kp LS(S)  &kp LS(T)  &kp LS(H)  &kp LS(K)    &kp LS(P)  &kp LS(N)  &kp LS(E)     &kp LS(I)  &kp LS(A)
&kp LS(X)  &kp LS(C)  &kp LS(B)  &kp LS(M)  &kp LS(Q)    &kp LS(Z)  &kp LS(F)  &kp QUESTION  &kp EXCL   &kp ASTRK
                                 &trans     &trans       &trans     &trans
            >;
        };
    };
};
