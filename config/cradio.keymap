/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };

        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp SQT        &kp COMMA  &kp PERIOD  &kp P            &kp Y          &kp F      &kp G      &kp C  &kp R  &kp L
HRML(A,        O,         E,         U)            &kp I          &kp D      &kp H      &kp T  &kp N  &kp S
&kp SEMICOLON  &kp Q      &kp J       &kp K            &kp X          &kp B      &kp M      &kp W  &kp V  &kp Z
                                      &lt 1 BACKSPACE  &kp LSHFT  &kp SPACE  &lt 2 RET
            >;
        };

        left_layer {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3     &kp NUMBER_4     &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&kp TAB       &kp LC(S)     &kp DQT          &kp PIPE2        &kp HASH        &kp MINUS     &kp EQUAL     &kp LBKT      &kp RBKT      &kp DEL
&kp ESC       &kp TILDE     &kp NON_US_BSLH  &kp NON_US_HASH  &kp TILDE2      &kp MINUS     &kp GRAVE     &kp LBKT      &kp RBKT      &kp DEL
                                             &mo 1            &kp LGUI        &kp RGUI      &mo 2
            >;
        };

        right_layer {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DLLR   &kp PERCENT      &kp CARET  &kp AMPS      &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp HASH         &kp QMARK    &kp FSLH  &kp COLON  &kp SEMICOLON    &kp MINUS  &kp KP_EQUAL  &kp LBRC      &kp RBRC              &kp RET
&kp LSHFT        &kp PLUS     &kp LBKT  &kp RBKT   &kp BSLH         &kp UNDER  &kp LEFT      &kp DOWN      &kp UP                &kp RIGHT
                                        &mo 3      &kp LCTRL        &kp SPACE  &mo 2
            >;
        };

        tri_layer {
            bindings = <
&kp KP_N1   &kp KP_N2   &kp KP_NUMBER_3  &kp KP_NUMBER_4  &kp KP_NUMBER_5    &trans  &trans     &trans        &trans      &trans
&kp F1      &kp F2      &kp F3           &kp F4           &kp F5             &trans  &kp PG_UP  &kp K_VOL_UP  &kp K_MUTE  &trans
&bt BT_CLR  &bt BT_NXT  &bt BT_PRV       &kp F6           &kp F7             &trans  &kp PG_DN  &kp K_VOL_DN  &trans      &trans
                                         &trans           &trans             &trans  &trans
            >;
        };
    };
};
